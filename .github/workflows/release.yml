name: Build
on:
  release:
    types: [created]

jobs:
  release:
    name: release ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-pc-windows-gnu, x86_64-unknown-linux-musl]
    env:
      CARGO_PKG_NAME: sourcemods-builder
    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v3

      # Step 2: Install required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      # Step 3: Set up Rust toolchain for the target platform
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Step 4: Build main binary
      - name: Build main binary
        run: cargo build --release --target ${{ matrix.target }}

      # Step 5: Build GUI binary
      - name: Build GUI binary
        run: cargo build --release --target ${{ matrix.target }} -p gui

      # Step 6: Create the archives
      - name: Build archive
        shell: bash
        run: |
          # Set the binary name from the CARGO_PKG_NAME env
          binary_name="${{ env.CARGO_PKG_NAME }}"

          # Determine platform name and archive type based on target
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            platform="windows"
            ext=".exe"
            archive_type=".zip"
          else
            platform="linux"
            ext=""
            archive_type=".tar.gz"
          fi

          # --- Archive for CLI ---
          cli_archive_name="$binary_name-$platform$archive_type"
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp "target/${{ matrix.target }}/release/$binary_name$ext" .
            7z a "$cli_archive_name" "$binary_name$ext" README.md
            rm "$binary_name$ext"
          else
            tar -czf "$cli_archive_name" -C "target/${{ matrix.target }}/release" "$binary_name$ext" -C "$(pwd)" README.md
          fi
          echo "ASSET_CLI=$cli_archive_name" >> $GITHUB_ENV

          # --- Archive for GUI ---
          gui_archive_name="$binary_name-$platform-gui$archive_type"
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp "target/${{ matrix.target }}/release/$binary_name-gui$ext" .
            7z a "$gui_archive_name" "$binary_name-gui$ext" README.md
            rm "$binary_name-gui$ext"
          else
            tar -czf "$gui_archive_name" -C "target/${{ matrix.target }}/release" "$binary_name-gui$ext" -C "$(pwd)" README.md
          fi
          echo "ASSET_GUI=$gui_archive_name" >> $GITHUB_ENV


      # Step 7: Upload the release asset to GitHub
      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET_CLI }}
            ${{ env.ASSET_GUI }}