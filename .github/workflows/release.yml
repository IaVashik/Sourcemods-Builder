name: Build Release Assets

on:
  release:
    types: [created]

jobs:
  # --- Windows Build Job (MSVC) ---
  release-windows:
    name: release windows (msvc)
    runs-on: windows-latest
    env:
      CARGO_PKG_NAME: sourcemods-builder
      TARGET: x86_64-pc-windows-msvc
    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v3

      # Step 2: Set up Rust toolchain for the MSVC target
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.TARGET }} 
          override: true

      # Step 3: Build main binary
      - name: Build main binary (CLI)
        run: cargo build --release --target ${{ env.TARGET }}

      # Step 4: Build GUI binary
      - name: Build GUI binary
        run: cargo build --release --target ${{ env.TARGET }} -p gui

      # Step 5: Create the archives using PowerShell
      - name: Build archive
        shell: pwsh
        run: |
          # Set the binary name from the CARGO_PKG_NAME env
          $binary_name = "${{ env.CARGO_PKG_NAME }}"
          $platform = "windows"
          $ext = ".exe"
          $archive_type = ".zip"
          $target_dir = "target/${{ env.TARGET }}/release" # Define target dir variable

          # --- Archive for CLI ---
          $cli_archive_name = "$binary_name-$platform$archive_type"
          # Use Copy-Item instead of cp
          Copy-Item "$target_dir/$binary_name$ext" .
          # Use 7z (assuming it's available on the runner)
          7z a "$cli_archive_name" "$binary_name$ext" README.md
          # Use Remove-Item instead of rm
          Remove-Item "$binary_name$ext"
          # Set environment variable for upload step (PowerShell syntax)
          echo "ASSET_CLI=$cli_archive_name" >> $env:GITHUB_ENV

          # --- Archive for GUI ---
          $gui_archive_name = "$binary_name-$platform-gui$archive_type"
          Copy-Item "$target_dir/$binary_name-gui$ext" .
          7z a "$gui_archive_name" "$binary_name-gui$ext" README.md
          Remove-Item "$binary_name-gui$ext"
          echo "ASSET_GUI=$gui_archive_name" >> $env:GITHUB_ENV

      # Step 6: Upload the Windows release assets to GitHub
      - name: Upload release assets (Windows)
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET_CLI }}
            ${{ env.ASSET_GUI }}

  # --- Linux Build Job (MUSL) ---
  release-linux:
    name: release linux (musl)
    runs-on: ubuntu-latest
    env:
      CARGO_PKG_NAME: sourcemods-builder
      TARGET: x86_64-unknown-linux-musl
    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v3

      # Step 2: Set up Rust toolchain for the target platform
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.TARGET }} 
          override: true

      # Step 3: Build main binary
      - name: Build main binary (CLI)
        run: cargo build --release --target ${{ env.TARGET }}

      # Step 5: Build GUI binary
      - name: Build GUI binary
        run: cargo build --release --target ${{ env.TARGET }} -p gui

      # Step 6: Create the archives
      - name: Build archive
        shell: bash
        run: |
          # Set the binary name from the CARGO_PKG_NAME env
          binary_name="${{ env.CARGO_PKG_NAME }}"
          platform="linux"
          ext="" # No extension for Linux binaries typically
          archive_type=".tar.gz"
          target_dir="target/${{ env.TARGET }}/release" 

          # --- Archive for CLI ---
          cli_archive_name="$binary_name-$platform$archive_type"
          tar -czf "$cli_archive_name" -C "$target_dir" "$binary_name$ext" -C "$(pwd)" README.md
          # Set environment variable for upload step (Bash syntax)
          echo "ASSET_CLI=$cli_archive_name" >> $GITHUB_ENV

          # --- Archive for GUI ---
          gui_archive_name="$binary_name-$platform-gui$archive_type"
          tar -czf "$gui_archive_name" -C "$target_dir" "$binary_name-gui$ext" -C "$(pwd)" README.md
          echo "ASSET_GUI=$gui_archive_name" >> $GITHUB_ENV

      # Step 7: Upload the Linux release assets to GitHub
      - name: Upload release assets (Linux)
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET_CLI }}
            ${{ env.ASSET_GUI }}